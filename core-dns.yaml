apiVersion: v1                                                                                         
kind: ServiceAccount                                                                                   
metadata:                                                                                              
  name: coredns                                                                                        
  namespace: kube-system
---                                                                                                                                                                                                          
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole                                                                                      
metadata:
  labels: {kubernetes.io/bootstrapping: rbac-defaults}
  name: system:coredns
rules:
- apiGroups: ['']
  resources: [endpoints, services, pods, namespaces]
  verbs: [list, watch]
- apiGroups: ['']
  resources: [nodes]
  verbs: [get]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: {rbac.authorization.kubernetes.io/autoupdate: 'true'}
  labels: {kubernetes.io/bootstrapping: rbac-defaults}
  name: system:coredns
roleRef: {apiGroup: rbac.authorization.k8s.io, kind: ClusterRole, name: 'system:coredns'}
subjects:
- {kind: ServiceAccount, name: coredns, namespace: kube-system}
---
apiVersion: v1
data: {Corefile: ".:53 {\n    errors\n    health\n    ready\n    kubernetes cluster.local\
    \ in-addr.arpa ip6.arpa {\n      pods insecure\n      fallthrough in-addr.arpa\
    \ ip6.arpa\n    }\n    prometheus :9153\n    forward . /etc/resolv.conf\n    cache\
    \ 30\n    loop\n    reload\n    loadbalance\n}\n"}
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           upstream
           fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {k8s-app: kube-dns, kubernetes.io/name: CoreDNS}
  name: coredns
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels: {k8s-app: kube-dns}
  strategy:
    rollingUpdate: {maxUnavailable: 1}
    type: RollingUpdate
  template:
    metadata:
      labels: {k8s-app: kube-dns}
    spec:
      containers:
      - args: [-conf, /etc/coredns/Corefile]
        image: coredns/coredns:1.6.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet: {path: /health, port: 8080, scheme: HTTP}
          initialDelaySeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns
        ports:
        - {containerPort: 53, name: dns, protocol: UDP}
        - {containerPort: 53, name: dns-tcp, protocol: TCP}
        - {containerPort: 9153, name: metrics, protocol: TCP}
        readinessProbe:
          httpGet: {path: /ready, port: 8181, scheme: HTTP}
        resources:
          limits: {memory: 170Mi}
          requests: {cpu: 100m, memory: 70Mi}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
        volumeMounts:
        - {mountPath: /etc/coredns, name: config-volume, readOnly: true}
      dnsPolicy: Default
      nodeSelector: {beta.kubernetes.io/os: linux}
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      tolerations:
      - {key: CriticalAddonsOnly, operator: Exists}
      serviceAccountName: coredns
      tolerations:
      - {key: CriticalAddonsOnly, operator: Exists}
      volumes:
      - configMap:
          items:
          - {key: Corefile, path: Corefile}
          name: coredns
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  annotations: {prometheus.io/port: '9153', prometheus.io/scrape: 'true'}
  labels: {k8s-app: kube-dns, kubernetes.io/cluster-service: 'true',
    kubernetes.io/name: CoreDNS}
  name: kube-dns
  namespace: kube-system
spec:
  ports:
  - {name: dns, port: 53, protocol: UDP}
  - {name: dns-tcp, port: 53, protocol: TCP}
  - {name: metrics, port: 9153, protocol: TCP}
  selector: {k8s-app: kube-dns}
